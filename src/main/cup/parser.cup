package lyc.compiler;

import java_cup.runtime.*;
import java.util.ArrayList;
import lyc.compiler.files.SymbolHashTableGenerator;

class Parser;

parser code {:
    public boolean syntaxErrors;
    public ArrayList<String> id_list = new ArrayList();

    public void syntax_error(Symbol current_token) {
        report_error(
            "[Syntax::Error] at line " + (current_token.left + 1) + 
            ", column " + current_token.right + "\n", null
        );
    }
:};

// -- Terminales -- //
terminal SymbolHashTableGenerator.VariableTypes TIPO;

terminal ID;
terminal CTE_INT;
terminal CTE_FLOAT;
terminal CTE_STRING;

terminal OP_MENOS;
terminal OP_MAS;
terminal OP_MULT;
terminal OP_DIV;
terminal OP_ASIG;

terminal COMA;
terminal DOS_PUNTOS;
terminal PUNTO_COMA;

terminal COMP_EQ;
terminal COMP_DIST;
terminal COMP_MAYOR;
terminal COMP_MENOR;
terminal COMP_MAYOR_EQ;
terminal COMP_MENOR_EQ;

terminal ABRE_LLAVE;
terminal CIERRA_LLAVE;
terminal ABRE_PAR;
terminal CIERRA_PAR;
terminal ABRE_LISTA;
terminal CIERRA_LISTA;

terminal OP_AND;
terminal OP_OR;
terminal OP_NOT;
terminal COND_IF;
terminal COND_ELSE;
terminal CICLO;
terminal INIC_VARS;

terminal LEER_TECLADO;
terminal MOSTRAR_PANTALLA;
terminal FUNC_INDICE;
terminal FUNC_CONCAT;

// -- No Terminales -- //
non terminal programa;
non terminal sentencia;
non terminal asignacion;
non terminal iteracion;
non terminal seleccion;

non terminal String expresion;
non terminal String termino;
non terminal String factor;
non terminal String constant;

non terminal condicion;
non terminal conjuncion;
non terminal termino_log;
non terminal comparacion;
non terminal comparador;
non terminal argumentos;
non terminal interna_call;
non terminal interna_id;
non terminal args_lista;
non terminal declaracion;
non terminal decl_lista;
non terminal var_lista;

// -- Start Symbol -- //
start with programa;

// -- Reglas -- //
programa  ::= sentencia              {: :}
            | programa sentencia     {: :}
            ;
sentencia ::= asignacion PUNTO_COMA   {: :}
            | interna_call PUNTO_COMA {: :}
            | declaracion PUNTO_COMA  {: :}
            | iteracion               {: :}
            | seleccion               {: :}
            ;
asignacion ::= ID:id OP_ASIG expresion:expr  {: :}
            ;
iteracion ::= CICLO ABRE_PAR condicion CIERRA_PAR ABRE_LLAVE programa CIERRA_LLAVE {: :}
            ;
seleccion ::= COND_IF ABRE_PAR condicion CIERRA_PAR ABRE_LLAVE programa CIERRA_LLAVE {: :}
            | COND_IF ABRE_PAR condicion CIERRA_PAR ABRE_LLAVE programa CIERRA_LLAVE COND_ELSE ABRE_LLAVE programa CIERRA_LLAVE {: :}
            ;
condicion ::= condicion OP_OR conjuncion {: :}
            | conjuncion {: :}
            ;
conjuncion ::= conjuncion OP_AND termino_log
            |  termino_log
            ;
termino_log ::= comparacion {: :}
            |   OP_NOT termino_log
            |   ABRE_PAR condicion CIERRA_PAR {: :}
            ;
comparacion ::= expresion comparador expresion {: :}
            ;
comparador ::= COMP_EQ  {: :}
            |  COMP_DIST  {: :}
            |  COMP_MAYOR  {: :}
            |  COMP_MENOR  {: :}
            |  COMP_MAYOR_EQ  {: :}
            |  COMP_MENOR_EQ  {: :}
            ;
expresion ::= expresion:expr OP_MAS termino:term   {: RESULT = expr + term; :}
            | expresion:expr OP_MENOS termino:term {: RESULT = expr + term; :}
            | termino:term {: RESULT = term; :}
            ;
termino   ::= termino:term OP_MULT factor:fact {: RESULT = term + fact; :}
            | termino:term OP_DIV factor:fact  {: RESULT = term + fact; :}
            | factor:fact {: RESULT = fact; :}
            ;
factor    ::= ID:id                 {: RESULT = id.toString(); :}
            | OP_MENOS ID:id        {: RESULT = '-' + id.toString(); :}
            | constant:cte          {: RESULT = cte; :}
            | OP_MENOS constant:cte {: RESULT = '-' + cte; :}
            | ABRE_PAR expresion:expr CIERRA_PAR {: RESULT = expr; :}
            | interna_call {: RESULT = "built-in"; :}
            ;
constant  ::= CTE_INT:cte     {: RESULT = cte.toString(); :}
            | CTE_FLOAT:cte   {: RESULT = cte.toString(); :}
            | CTE_STRING:cte  {: RESULT = cte.toString(); :}
            ;
interna_call ::= interna_id ABRE_PAR argumentos CIERRA_PAR {: :}
            ;
interna_id ::= MOSTRAR_PANTALLA {: :}
            |  LEER_TECLADO {: :}
            |  FUNC_INDICE {: :}
            |  FUNC_CONCAT {: :}
            ;
argumentos ::= factor {: :}
            |  argumentos COMA factor {: :}
            |  argumentos COMA ABRE_LISTA args_lista CIERRA_LISTA {: :}
            ;
args_lista ::= factor {: :}
            |  args_lista COMA factor {: :}
            ;
declaracion ::= INIC_VARS ABRE_LLAVE decl_lista CIERRA_LLAVE {: :}
            ;
decl_lista ::= var_lista DOS_PUNTOS TIPO:type PUNTO_COMA {:
                    id_list.forEach(id -> SymbolHashTableGenerator.addVariable(id, type));
                    id_list = new ArrayList();
                :}
            |  decl_lista var_lista DOS_PUNTOS TIPO:type PUNTO_COMA {:
                    id_list.forEach(id -> SymbolHashTableGenerator.addVariable(id, type));
                    id_list = new ArrayList();
                :}
            ;
var_lista ::= ID:id {: id_list.add(id.toString()); :}
            | var_lista COMA ID:id {: id_list.add(id.toString()); :}
            ;
